{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","super-rentals/tests/acceptance/super-rentals-test.js","super-rentals/tests/integration/components/jumbo-test.js","super-rentals/tests/integration/components/map-test.js","super-rentals/tests/integration/components/rental-test.js","super-rentals/tests/integration/components/rental/detailed-test.js","super-rentals/tests/integration/components/rental/image-test.js","super-rentals/tests/integration/components/rentals-test.js","super-rentals/tests/integration/components/rentals/filter-test.js","super-rentals/tests/integration/components/share-button-test.js","super-rentals/tests/test-helper.js","super-rentals/tests/unit/models/rental-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"super-rentals/tests/acceptance/super-rentals-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | super rentals', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)('visiting /', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n      assert.dom('nav').exists();\n      assert.dom('h1').hasText('SuperRentals');\n      assert.dom('h2').hasText('Welcome to Super Rentals!');\n      assert.dom('.jumbo a.button').hasText('About Us');\n      await (0, _testHelpers.click)('.jumbo a.button');\n      assert.equal((0, _testHelpers.currentURL)(), '/about');\n    });\n    (0, _qunit.test)('visiting /about', async function (assert) {\n      await (0, _testHelpers.visit)('/about');\n      assert.equal((0, _testHelpers.currentURL)(), '/about');\n      assert.dom('nav').exists();\n      assert.dom('h1').hasText('SuperRentals');\n      assert.dom('h2').hasText('About Super Rentals');\n      assert.dom('.jumbo a.button').hasText('Contact Us');\n      await (0, _testHelpers.click)('.jumbo a.button');\n      assert.equal((0, _testHelpers.currentURL)(), '/getting-in-touch');\n    });\n    (0, _qunit.test)('visiting /getting-in-touch', async function (assert) {\n      await (0, _testHelpers.visit)('/getting-in-touch');\n      assert.equal((0, _testHelpers.currentURL)(), '/getting-in-touch');\n      assert.dom('nav').exists();\n      assert.dom('h1').hasText('SuperRentals');\n      assert.dom('h2').hasText('Contact Us');\n      assert.dom('.jumbo a.button').hasText('Back Home');\n      await (0, _testHelpers.click)('.jumbo a.button');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n    });\n    (0, _qunit.test)('viewing the details of a rental property', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.dom('.rental').exists({\n        count: 3\n      });\n      await (0, _testHelpers.click)('.rental:first-of-type a');\n      assert.equal((0, _testHelpers.currentURL)(), '/rentals/grand-old-mansion');\n    });\n    (0, _qunit.test)('visiting /rentals/grand-old-mansion', async function (assert) {\n      await (0, _testHelpers.visit)('/rentals/grand-old-mansion');\n      assert.equal((0, _testHelpers.currentURL)(), '/rentals/grand-old-mansion');\n      assert.dom('nav').exists();\n      assert.dom('h1').containsText('SuperRentals');\n      assert.dom('h2').containsText('Grand Old Mansion');\n      assert.dom('.rental.detailed').exists();\n      assert.dom('.share.button').hasText('Share on Twitter');\n      let button = (0, _testHelpers.find)('.share.button');\n      let tweetURL = new URL(button.href);\n      assert.equal(tweetURL.host, 'twitter.com');\n      assert.equal(tweetURL.searchParams.get('url'), `${window.location.origin}/rentals/grand-old-mansion`);\n    });\n    (0, _qunit.test)('navigating using the nav-bar', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.dom('nav').exists();\n      assert.dom('nav a.menu-index').hasText('SuperRentals');\n      assert.dom('nav a.menu-about').hasText('About');\n      assert.dom('nav a.menu-contact').hasText('Contact');\n      await (0, _testHelpers.click)('nav a.menu-about');\n      assert.equal((0, _testHelpers.currentURL)(), '/about');\n      await (0, _testHelpers.click)('nav a.menu-contact');\n      assert.equal((0, _testHelpers.currentURL)(), '/getting-in-touch');\n      await (0, _testHelpers.click)('nav a.menu-index');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/jumbo-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | jumbo', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders the content inside a jumbo header with a tomster', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Jumbo>Hello World</Jumbo>\n      */\n      {\n        id: \"YfYp0FPz\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"jumbo\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Hello World\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.jumbo').exists();\n      assert.dom('.jumbo').hasText('Hello World');\n      assert.dom('.jumbo .tomster').exists();\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/map-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"super-rentals/config/environment\"], function (_qunit, _emberQunit, _testHelpers, _environment) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | map', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a map for the specified parameters', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Map\n          @lat=\"37.7797\"\n          @lng=\"-122.4184\"\n          @zoom=\"10\"\n          @width=\"150\"\n          @height=\"120\"\n        />\n      */\n      {\n        id: \"hl/snceS\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[],[[\\\"@lat\\\",\\\"@lng\\\",\\\"@zoom\\\",\\\"@width\\\",\\\"@height\\\"],[\\\"37.7797\\\",\\\"-122.4184\\\",\\\"10\\\",\\\"150\\\",\\\"120\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.map').exists();\n      assert.dom('.map img').hasAttribute('alt', 'Map image at coordinates 37.7797,-122.4184');\n      assert.dom('.map img').hasAttribute('src', /^https:\\/\\/api\\.mapbox\\.com/, 'the src starts with \"https://api.mapbox.com\"');\n      assert.dom('.map img').hasAttribute('width', '150');\n      assert.dom('.map img').hasAttribute('height', '120');\n      let {\n        src\n      } = (0, _testHelpers.find)('.map img');\n      let token = encodeURIComponent(_environment.default.MAPBOX_ACCESS_TOKEN);\n      assert.ok(src.includes('-122.4184,37.7797,10'), 'the src should include the lng,lat,zoom parameter');\n      assert.ok(src.includes('150x120@2x'), 'the src should include the width,height and @2x parameter');\n      assert.ok(src.includes(`access_token=${token}`), 'the src should include the escaped access token');\n    });\n    (0, _qunit.test)('the default alt attribute can be overridden', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Map\n            @lat=\"37.7797\"\n            @lng=\"-122.4184\"\n            @zoom=\"10\"\n            @width=\"150\"\n            @height=\"120\"\n            alt=\"A map of San Francisco\"\n          />\n      */\n      {\n        id: \"U35cuiTL\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[[23,\\\"alt\\\",\\\"A map of San Francisco\\\",null]],[[\\\"@lat\\\",\\\"@lng\\\",\\\"@zoom\\\",\\\"@width\\\",\\\"@height\\\"],[\\\"37.7797\\\",\\\"-122.4184\\\",\\\"10\\\",\\\"150\\\",\\\"120\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.map img').hasAttribute('alt', 'A map of San Francisco');\n    });\n    (0, _qunit.test)('the src, width and height attributes cannot be overridden', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Map\n            @lat=\"37.7797\"\n            @lng=\"-122.4184\"\n            @zoom=\"10\"\n            @width=\"150\"\n            @height=\"120\"\n            src=\"/assets/images/teaching-tomster.png\"\n            width=\"200\"\n            height=\"300\"\n          />\n      */\n      {\n        id: \"4CB4PVXH\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[[23,\\\"src\\\",\\\"/assets/images/teaching-tomster.png\\\",null],[23,\\\"width\\\",\\\"200\\\",null],[23,\\\"height\\\",\\\"300\\\",null]],[[\\\"@lat\\\",\\\"@lng\\\",\\\"@zoom\\\",\\\"@width\\\",\\\"@height\\\"],[\\\"37.7797\\\",\\\"-122.4184\\\",\\\"10\\\",\\\"150\\\",\\\"120\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.map img').hasAttribute('src', /^https:\\/\\/api\\.mapbox\\.com/, 'the src starts with \"https://api.mapbox.com\"');\n      assert.dom('.map img').hasAttribute('width', '150');\n      assert.dom('.map img').hasAttribute('height', '120');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rental', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.setupRouter();\n    });\n    (0, _qunit.test)('it renders information about a rental property', async function (assert) {\n      this.setProperties({\n        rental: {\n          id: 'grand-old-mansion',\n          title: 'Grand Old Mansion',\n          owner: 'Veruca Salt',\n          city: 'San Francisco',\n          location: {\n            lat: 37.7749,\n            lng: -122.4194\n          },\n          category: 'Estate',\n          type: 'Standalone',\n          bedrooms: 15,\n          image: 'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',\n          description: 'This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests.'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rental @rental={{this.rental}} />\n      */\n      {\n        id: \"56rmR8vx\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rental\\\",[],[[\\\"@rental\\\"],[[27,[24,0],[\\\"rental\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('article').hasClass('rental');\n      assert.dom('article h3').hasText('Grand Old Mansion');\n      assert.dom('article h3 a').hasAttribute('href', '/rentals/grand-old-mansion');\n      assert.dom('article .detail.owner').includesText('Veruca Salt');\n      assert.dom('article .detail.type').includesText('Standalone');\n      assert.dom('article .detail.location').includesText('San Francisco');\n      assert.dom('article .detail.bedrooms').includesText('15');\n      assert.dom('article .image').exists();\n      assert.dom('article .map').exists();\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental/detailed-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rental/detailed', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.setProperties({\n        rental: {\n          id: 'grand-old-mansion',\n          title: 'Grand Old Mansion',\n          owner: 'Veruca Salt',\n          city: 'San Francisco',\n          location: {\n            lat: 37.7749,\n            lng: -122.4194\n          },\n          category: 'Estate',\n          type: 'Standalone',\n          bedrooms: 15,\n          image: 'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',\n          description: 'This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests.'\n        }\n      });\n    });\n    (0, _qunit.test)('it renders a header with a share button', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rental::Detailed @rental={{this.rental}} />\n      */\n      {\n        id: \"T8Kq9Z++\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rental/detailed\\\",[],[[\\\"@rental\\\"],[[27,[24,0],[\\\"rental\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.jumbo').exists();\n      assert.dom('.jumbo h2').containsText('Grand Old Mansion');\n      assert.dom('.jumbo p').containsText('a nice place to stay near San Francisco');\n      assert.dom('.jumbo a.button').containsText('Share on Twitter');\n    });\n    (0, _qunit.test)('it renders detailed information about a rental property', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rental::Detailed @rental={{this.rental}} />\n      */\n      {\n        id: \"T8Kq9Z++\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rental/detailed\\\",[],[[\\\"@rental\\\"],[[27,[24,0],[\\\"rental\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('article').hasClass('rental');\n      assert.dom('article h3').containsText('About Grand Old Mansion');\n      assert.dom('article .detail.owner').containsText('Veruca Salt');\n      assert.dom('article .detail.type').containsText('Standalone – Estate');\n      assert.dom('article .detail.location').containsText('San Francisco');\n      assert.dom('article .detail.bedrooms').containsText('15');\n      assert.dom('article .image').exists();\n      assert.dom('article .map').exists();\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental/image-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rental/image', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders given image', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rental::Image\n          src=\"/assets/images/teaching-tomster.png\"\n          alt=\"Teaching Tomster\"\n        />\n      */\n      {\n        id: \"l1oB9FkC\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rental/image\\\",[[23,\\\"src\\\",\\\"/assets/images/teaching-tomster.png\\\",null],[23,\\\"alt\\\",\\\"Teaching Tomster\\\",null]],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.image').exists();\n      assert.dom('.image img').hasAttribute('src', '/assets/images/teaching-tomster.png');\n      assert.dom('.image img').hasAttribute('alt', 'Teaching Tomster');\n    });\n    (0, _qunit.test)('clicking on the component toggles its size', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <Rental::Image\n              src=\"/assets/teaching-tomster.png\"\n              alt=\"Teaching Tomster\"\n            />\n          \n      */\n      {\n        id: \"lMWAJ8NU\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,1,0,0,\\\"\\\\n      \\\"],[7,\\\"rental/image\\\",[[23,\\\"src\\\",\\\"/assets/teaching-tomster.png\\\",null],[23,\\\"alt\\\",\\\"Teaching Tomster\\\",null]],[[],[]],null],[1,1,0,0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('button.image').exists();\n      assert.dom('.image').doesNotHaveClass('large');\n      assert.dom('.image small').hasText('View Larger');\n      await (0, _testHelpers.click)('button.image');\n      assert.dom('.image').hasClass('large');\n      assert.dom('.image small').hasText('View Smaller');\n      await (0, _testHelpers.click)('button.image');\n      assert.dom('.image').doesNotHaveClass('large');\n      assert.dom('.image small').hasText('View Larger');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rentals-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rentals', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.setProperties({\n        rentals: [{\n          id: 'grand-old-mansion',\n          title: 'Grand Old Mansion',\n          owner: 'Veruca Salt',\n          city: 'San Francisco',\n          location: {\n            lat: 37.7749,\n            lng: -122.4194\n          },\n          category: 'Estate',\n          type: 'Standalone',\n          bedrooms: 15,\n          image: 'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',\n          description: 'This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests.'\n        }, {\n          id: 'urban-living',\n          title: 'Urban Living',\n          owner: 'Mike Teavee',\n          city: 'Seattle',\n          location: {\n            lat: 47.6062,\n            lng: -122.3321\n          },\n          category: 'Condo',\n          type: 'Community',\n          bedrooms: 1,\n          image: 'https://upload.wikimedia.org/wikipedia/commons/0/0e/Alfonso_13_Highrise_Tegucigalpa.jpg',\n          description: 'A commuters dream. This rental is within walking distance of 2 bus stops and the Metro.'\n        }, {\n          id: 'downtown-charm',\n          title: 'Downtown Charm',\n          owner: 'Violet Beauregarde',\n          city: 'Portland',\n          location: {\n            lat: 45.5175,\n            lng: -122.6801\n          },\n          category: 'Apartment',\n          type: 'Community',\n          bedrooms: 3,\n          image: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Wheeldon_Apartment_Building_-_Portland_Oregon.jpg',\n          description: 'Convenience is at your doorstep with this charming downtown rental. Great restaurants and active night life are within a few feet.'\n        }]\n      });\n    });\n    (0, _qunit.test)('it renders all given rental properties by default', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rentals @rentals={{this.rentals}} />\n      */\n      {\n        id: \"ioWuF1QI\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rentals\\\",[],[[\\\"@rentals\\\"],[[27,[24,0],[\\\"rentals\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.rentals').exists();\n      assert.dom('.rentals input').exists();\n      assert.dom('.rentals .results').exists();\n      assert.dom('.rentals .results li').exists({\n        count: 3\n      });\n      assert.dom('.rentals .results li:nth-of-type(1)').containsText('Grand Old Mansion');\n      assert.dom('.rentals .results li:nth-of-type(2)').containsText('Urban Living');\n      assert.dom('.rentals .results li:nth-of-type(3)').containsText('Downtown Charm');\n    });\n    (0, _qunit.test)('it updates the results according to the search query', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rentals @rentals={{this.rentals}} />\n      */\n      {\n        id: \"ioWuF1QI\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rentals\\\",[],[[\\\"@rentals\\\"],[[27,[24,0],[\\\"rentals\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('.rentals').exists();\n      assert.dom('.rentals input').exists();\n      await (0, _testHelpers.fillIn)('.rentals input', 'Downtown');\n      assert.dom('.rentals .results').exists();\n      assert.dom('.rentals .results li').exists({\n        count: 1\n      });\n      assert.dom('.rentals .results li').containsText('Downtown Charm');\n      await (0, _testHelpers.fillIn)('.rentals input', 'Mansion');\n      assert.dom('.rentals .results').exists();\n      assert.dom('.rentals .results li').exists({\n        count: 1\n      });\n      assert.dom('.rentals .results li').containsText('Grand Old Mansion');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rentals/filter-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rentals/filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Rentals::Filter />\n      */\n      {\n        id: \"ayUjRgPd\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"rentals/filter\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <Rentals::Filter>\n              template block text\n            </Rentals::Filter>\n          \n      */\n      {\n        id: \"pad96Qd4\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,1,0,0,\\\"\\\\n      \\\"],[7,\\\"rentals/filter\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[1,1,0,0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/share-button-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  class MockRouterService extends Ember.Service {\n    get currentURL() {\n      return '/foo/bar?baz=true#some-section';\n    }\n\n  }\n\n  (0, _qunit.module)('Integration | Component | share-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:router', MockRouterService);\n\n      this.tweetParam = param => {\n        let link = (0, _testHelpers.find)('a');\n        let url = new URL(link.href);\n        return url.searchParams.get(param);\n      };\n    });\n    (0, _qunit.test)('basic usage', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ShareButton>Tweet this!</ShareButton>\n      */\n      {\n        id: \"1eTSReZB\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"share-button\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Tweet this!\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a').exists();\n      assert.dom('a').hasAttribute('target', '_blank');\n      assert.dom('a').hasAttribute('rel', 'external nofollow noopener noreferrer');\n      assert.dom('a').hasAttribute('href', /^https:\\/\\/twitter\\.com\\/intent\\/tweet/);\n      assert.dom('a').hasClass('share');\n      assert.dom('a').hasClass('button');\n      assert.dom('a').containsText('Tweet this!');\n      assert.equal(this.tweetParam('url'), new URL('/foo/bar?baz=true#some-section', window.location.origin));\n    });\n    (0, _qunit.test)('it supports passing @text', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ShareButton @text=\"Hello Twitter!\">Tweet this!</ShareButton>\n      */\n      {\n        id: \"2Qhdh+tH\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"share-button\\\",[],[[\\\"@text\\\"],[\\\"Hello Twitter!\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Tweet this!\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.equal(this.tweetParam('text'), 'Hello Twitter!');\n    });\n    (0, _qunit.test)('it supports passing @hashtags', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ShareButton @hashtags=\"foo,bar,baz\">Tweet this!</ShareButton>\n      */\n      {\n        id: \"IT6Ll3GJ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"share-button\\\",[],[[\\\"@hashtags\\\"],[\\\"foo,bar,baz\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Tweet this!\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.equal(this.tweetParam('hashtags'), 'foo,bar,baz');\n    });\n    (0, _qunit.test)('it supports passing @via', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ShareButton @via=\"emberjs\">Tweet this!</ShareButton>\n      */\n      {\n        id: \"nUjT4w48\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"share-button\\\",[],[[\\\"@via\\\"],[\\\"emberjs\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Tweet this!\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.equal(this.tweetParam('via'), 'emberjs');\n    });\n    (0, _qunit.test)('it supports adding extra classes', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ShareButton class=\"extra things\">Tweet this!</ShareButton>\n      */\n      {\n        id: \"ocQh9uSh\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"share-button\\\",[[23,\\\"class\\\",\\\"extra things\\\",null]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Tweet this!\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a').hasClass('share');\n      assert.dom('a').hasClass('button');\n      assert.dom('a').hasClass('extra');\n      assert.dom('a').hasClass('things');\n    });\n    (0, _qunit.test)('the target, rel and href attributes cannot be overridden', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ShareButton target=\"_self\" rel=\"\" href=\"/\">Not a Tweet!</ShareButton>\n      */\n      {\n        id: \"K3U4+IpV\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"share-button\\\",[[23,\\\"target\\\",\\\"_self\\\",null],[23,\\\"rel\\\",\\\"\\\",null],[23,\\\"href\\\",\\\"/\\\",null]],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[1,1,0,0,\\\"Not a Tweet!\\\"]],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('a').hasAttribute('target', '_blank');\n      assert.dom('a').hasAttribute('rel', 'external nofollow noopener noreferrer');\n      assert.dom('a').hasAttribute('href', /^https:\\/\\/twitter\\.com\\/intent\\/tweet/);\n    });\n  });\n});","define(\"super-rentals/tests/test-helper\", [\"super-rentals/app\", \"super-rentals/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"super-rentals/tests/unit/models/rental-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | rental', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it has the right type', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let rental = store.createRecord('rental', {\n        id: 'grand-old-mansion',\n        title: 'Grand Old Mansion',\n        owner: 'Veruca Salt',\n        city: 'San Francisco',\n        location: {\n          lat: 37.7749,\n          lng: -122.4194\n        },\n        category: 'Estate',\n        bedrooms: 15,\n        image: 'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',\n        description: 'This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests.'\n      });\n      assert.equal(rental.type, 'Standalone');\n      rental.category = 'Condo';\n      assert.equal(rental.type, 'Community');\n      rental.category = 'Townhouse';\n      assert.equal(rental.type, 'Community');\n      rental.category = 'Apartment';\n      assert.equal(rental.type, 'Community');\n      rental.category = 'Estate';\n      assert.equal(rental.type, 'Standalone');\n    });\n  });\n});","define('super-rentals/config/environment', [], function() {\n  var prefix = 'super-rentals';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('super-rentals/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzGA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}